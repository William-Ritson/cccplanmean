"use strict";var ApplicationConfiguration=function(){var applicationModuleName="cccplan",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("agreements"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("courses"),ApplicationConfiguration.registerModule("transfer"),ApplicationConfiguration.registerModule("users"),angular.module("agreements").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAgreements",{url:"/agreements",templateUrl:"modules/agreements/views/list-agreements.client.view.html"}).state("createAgreement",{url:"/agreements/create",templateUrl:"modules/agreements/views/create-agreement.client.view.html"}).state("viewAgreement",{url:"/agreements/:agreementId",templateUrl:"modules/agreements/views/view-agreement.client.view.html"}).state("editAgreement",{url:"/agreements/:agreementId/edit",templateUrl:"modules/agreements/views/edit-agreement.client.view.html"})}]),angular.module("agreements").controller("AgreementsController",["$scope","$stateParams","$location","Authentication","Agreements",function($scope,$stateParams,$location,Authentication,Agreements){$scope.authentication=Authentication,$scope.create=function(){var agreement=new Agreements({name:this.name});agreement.$save(function(response){$location.path("agreements/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(agreement){if(agreement){agreement.$remove();for(var i in $scope.agreements)$scope.agreements[i]===agreement&&$scope.agreements.splice(i,1)}else $scope.agreement.$remove(function(){$location.path("agreements")})},$scope.update=function(){var agreement=$scope.agreement;agreement.$update(function(){$location.path("agreements/"+agreement._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.agreements=Agreements.query()},$scope.findOne=function(){$scope.agreement=Agreements.get({agreementId:$stateParams.agreementId})}}]),angular.module("agreements").factory("Agreements",["$resource",function($resource){return $resource("agreements/:agreementId",{agreementId:"@_id"},{update:{method:"PUT"}})}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("courses").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Courses","courses","dropdown","/courses(/create)?"),Menus.addSubMenuItem("topbar","courses","List Courses","courses"),Menus.addSubMenuItem("topbar","courses","New Course","courses/create")}]),angular.module("courses").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCourses",{url:"/courses",templateUrl:"modules/courses/views/list-courses.client.view.html"}).state("createCourse",{url:"/courses/create",templateUrl:"modules/courses/views/create-course.client.view.html"}).state("viewCourse",{url:"/courses/:courseId",templateUrl:"modules/courses/views/view-course.client.view.html"}).state("editCourse",{url:"/courses/:courseId/edit",templateUrl:"modules/courses/views/edit-course.client.view.html"})}]),angular.module("courses").controller("CoursesController",["$scope","$stateParams","$location","Authentication","Courses",function($scope,$stateParams,$location,Authentication,Courses){$scope.authentication=Authentication,$scope.create=function(){var course=new Courses({name:this.name});course.$save(function(response){$location.path("courses/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(course){if(course){course.$remove();for(var i in $scope.courses)$scope.courses[i]===course&&$scope.courses.splice(i,1)}else $scope.course.$remove(function(){$location.path("courses")})},$scope.update=function(){var course=$scope.course;course.$update(function(){$location.path("courses/"+course._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.courses=Courses.query()},$scope.findOne=function(){$scope.course=Courses.get({courseId:$stateParams.courseId})}}]),angular.module("courses").factory("Courses",["$resource",function($resource){return $resource("courses/:courseId",{courseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("transfer").config(["$stateProvider",function($stateProvider){$stateProvider.state("transfer",{url:"/transfer",templateUrl:"modules/transfer/views/transfer.client.view.html"})}]),angular.module("transfer").controller("TransferController",["$scope","$http","$log",function($scope,$http,$log){$scope.toSchools=[],$scope.fromSchools=[],$scope.loading=!1;var init=function(){$scope.loading=!0,$http.get("/data/assist-index.json").success(function(data){$log.log(data),$scope.toSchools=data.to,$scope.fromSchools=data.from,$scope.loading=!1}).error(function(data,status){$log.error(status),$scope.loading=!1,$scope.error="Failed to load school list.",$scope.retry=init})};init(),$scope.changeFrom=function(){$scope.major&&$scope.getAgreement()},$scope.getAgreement=function(){var query={to:$scope.to.id,from:$scope.from.id,major:$scope.major};$log.log(query),$scope.loading=!0,$http({url:"dynAgreement",method:"GET",params:query}).success(function(data){$scope.loading=!1,$log.log(data),$scope.rows=data.table,$scope.src=data.src,data.src.match("ASSIST was not able to process your request.")?($scope.error="Assist.org returned an empty page.",$scope.retry=$scope.getAgreement):$scope.error=!1}).error(function(data,status){$log.error(status),$scope.loading=!1,$scope.error="Error while loading agreement",$scope.retry=$scope.getAgreement})}}]),angular.module("transfer").filter("courseLink",[function(){return function(input){return"courseLink filter: "+input}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);